/*
 * Oled_pcf_i2c.cpp
 *
 *  Created on: 10 wrz 2018
 *      Author: Szymon
 */
//-------- include area ---------------//
#include "Beer_machine.h"
//-------------------------------------//

//-------- define area ----------------//
#define Display_adress  	    0x3C
#define PCF_adress			    0x20
#define Blink_delay			    200	   //[ms]
#define Quantity_blink		    17
#define	Show_logo_time			15000  //[ms]
#define	display_line1_y			0
#define	display_line2_y			(OLED_FONT_HEIGHT*2)+2
#define	display_line3_y			(OLED_FONT_HEIGHT*4)+4
#define	display_line4_y			(OLED_FONT_HEIGHT*6)+6
#define Delta_motor_milis		5000   //[ms]
#define Max_ok_signal 			62700
#define Max_revers_signal		5000
//-------------------------------------//

//-------- new typ area ---------------//
struct Display_control
{
	int    temperature; 		       //0.01[C]
	bool   triac_state;
	char   triac_power;
	String stage_name;
	char   timer_procent;
	bool operator !=( const Display_control & a) const
	{
		return((temperature   != a.temperature)
			 ||(triac_state   != a.triac_state)
			 ||(triac_power   != a.triac_power)
			 ||(stage_name    != a.stage_name)
			 ||(timer_procent != a.timer_procent));
	}
};
struct PCF_state
{
	char state = Stop_engine_now;
	unsigned long time_ms;
	bool change;
	unsigned int ADS1110_value = 62701;
	String name_state;
	int Error_flag = 0;
};
//-------------------------------------//

//-------- global variable area -------//
char view_on_display=Viwe_display_Text_ino;
Display_control Display_state_now;
OLED display=OLED(SDA,SCL,NO_RESET_PIN, Display_adress, 128, 64);
const String OLED_line_1="Temperatura: ";
const String OLED_line_2="Stan grzalki: ";
const String OLED_line_3="Etap: ";
PCF_state motor_state;
const byte DEV_ADDR = 0x49;
ADS1110 ads1110(DEV_ADDR);

const unsigned char warning_icon[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xFC, 0xFC, 0xFE, 0x7E, 0xFE,
0xFC, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFC, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x01,
0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
0xF0, 0xF8, 0xFE, 0xFF, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xC0,
0xC0, 0x80, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFC, 0xFF, 0xFF,
0x7F, 0x1F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC,
0xF0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0x3F, 0x0F, 0x03, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1F,
0x3F, 0xFF, 0xFF, 0xFE, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xDF, 0xDF, 0xDF,
0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFC,
0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x0F, 0x0F,
0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3F, 0x7F, 0x7F, 0xFF,
0xFF, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFB, 0xFF, 0xFF, 0x7F, 0x3F,
0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char logo_icon[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0E, 0x02,
0x06, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xF8, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF8, 0x04, 0x02, 0xFB, 0xFB, 0xFB, 0xBB, 0xBB, 0xBB, 0xFB, 0xF3, 0x63, 0x03, 0x03, 0x03, 0x83,
0xC3, 0xC3, 0xC3, 0xC3, 0x83, 0x03, 0x03, 0x03, 0xC3, 0xC3, 0xC3, 0x83, 0xC3, 0x43, 0x03, 0x83,
0xC3, 0xC3, 0xC3, 0xC3, 0x83, 0x03, 0x03, 0x03, 0xC3, 0xC3, 0x03, 0x03, 0x03, 0xC3, 0xC3, 0x03,
0x03, 0x03, 0xFB, 0xFB, 0x03, 0x03, 0x83, 0xC3, 0xC3, 0x43, 0x02, 0x06, 0xFC, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC1, 0xCE, 0xF0,
0xDC, 0x87, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xAF, 0xAF, 0xAF, 0xAF, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x1E, 0x00, 0x00, 0x1F, 0x1F,
0x3B, 0x30, 0x30, 0x39, 0x1F, 0x1F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x01, 0x00, 0x00, 0x11, 0x33,
0x37, 0x26, 0x26, 0x3E, 0x3C, 0x1C, 0x00, 0x00, 0x3F, 0x3F, 0x38, 0x30, 0x18, 0x3F, 0x3F, 0x00,
0x00, 0x00, 0x3F, 0x3F, 0x0E, 0x07, 0x0F, 0x3F, 0x38, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0x87, 0x07, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x37, 0x37, 0x37, 0x77, 0xFF, 0xFE, 0xC0, 0x00,
0x00, 0xF0, 0xF8, 0xD8, 0xD8, 0xD8, 0xF8, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0xF8, 0xD8, 0xD8, 0xD8,
0xF8, 0xF0, 0xF0, 0x00, 0x00, 0xF8, 0xF8, 0xF0, 0x18, 0x18, 0x08, 0x00, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x8F, 0xC0, 0x40,
0x40, 0x40, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
0x01, 0x01, 0x07, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xC0,
0xC7, 0xC8, 0x98, 0x90, 0x90, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x13, 0x11, 0x10,
0x10, 0x13, 0x17, 0x17, 0x16, 0x16, 0x16, 0x12, 0x10, 0x10, 0x10, 0x13, 0x17, 0x17, 0x16, 0x16,
0x16, 0x12, 0x10, 0x10, 0x10, 0x17, 0x17, 0x17, 0x10, 0x10, 0x10, 0x18, 0x0F, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x18, 0xCC, 0x44, 0xC4, 0x82, 0x11, 0x09, 0x84, 0xC2,
0x42, 0x42, 0x42, 0x40, 0x43, 0x43, 0x43, 0x43, 0x42, 0x46, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
0xFC, 0xFC, 0xF8, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x3F, 0xF8, 0xFF, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0x3E, 0x0E, 0x0F, 0x0F, 0x1E,
0xFE, 0xFC, 0xF0, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F,
0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F,
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0xF8, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xE0, 0xF8, 0x7E,
0x3F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x30, 0x38, 0x3F, 0x1F, 0x1F, 0x1F,
0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0C, 0x0F, 0x0F, 0x00, 0x03, 0x30, 0x30, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x60, 0x70, 0x78, 0x7E, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7C, 0x78, 0x70,
0x70, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x1F, 0x07, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//-------------------------------------//

//------- core function area ----------//
void I2C_begine()
{
	display.begin();
	display.setTTYMode(false);
	ads1110.reset();
}
inline void clear_char(char column, char line)
{
	display.draw_rectangle(column*OLED_FONT_WIDTH, line, 124, line+(OLED_FONT_HEIGHT*2), OLED::SOLID, OLED::BLACK);
}
void Blink_display(const char quantity_blink)
{
	static char blinker = 0;
	static unsigned long time_blinker = millis();
	if(quantity_blink!=0) blinker=quantity_blink;
	else if(blinker==0xFF) return;
	if((millis()-time_blinker)>Blink_delay)
	{
		time_blinker=millis();
		if(blinker==0)
		{
			blinker = 0xFF;
			display.set_invert(false);
			return;
		}
		if(blinker&0x01) display.set_invert(true);
		else 		     display.set_invert(false);
		if(blinker>0) blinker--;
	}
}
void Start_logo_show()
{
	display.clear();
	display.draw_bitmap(0, 0, 128, 64, logo_icon);
	display.display();
	Blink_display(Quantity_blink);
}
void Error_viwe_show()
{
	display.clear();
	display.draw_bitmap(0, 0, 128, 64, warning_icon);
	display.display();
	Blink_display(Quantity_blink);
	Set_Triak_control_OFF();
	Set_Control_therm_OFF();
}
void Text_frame_Display()
{
	display.clear();
    display.draw_string(0,display_line1_y,OLED_line_1.c_str(),OLED::ONE_HALF_SIZE);
    display.draw_string(0,display_line2_y,OLED_line_2.c_str(),OLED::ONE_HALF_SIZE);
    display.draw_string(0,display_line3_y,OLED_line_3.c_str(),OLED::ONE_HALF_SIZE);
    display.display();
}
void Value_show_display(float temperature, bool heater_state, int power_procent, String stage, char time_procent)
{
	String Line2;
	if(heater_state) Line2 = "NO " + String(power_procent) +"%";
	else 		     Line2 = "OFF";
	clear_char(OLED_line_1.length(), display_line1_y);
	clear_char(OLED_line_2.length(), display_line2_y);
	clear_char(OLED_line_3.length(), display_line3_y);
	display.draw_string(OLED_line_1.length()*OLED_FONT_WIDTH, display_line1_y, String(temperature).c_str(),OLED::ONE_HALF_SIZE);
	display.draw_string(OLED_line_2.length()*OLED_FONT_WIDTH, display_line2_y, Line2.c_str(),OLED::ONE_HALF_SIZE);
	display.draw_string(OLED_line_3.length()*OLED_FONT_WIDTH, display_line3_y, stage.c_str(),OLED::ONE_HALF_SIZE);
	if(time_procent==0)
	{
		display.draw_rectangle(0, display_line4_y, 124, 64, OLED::SOLID, OLED::BLACK);
	}
	display.draw_rectangle(0, display_line4_y, 124, 64, OLED::SOLID);
	display.draw_rectangle(((100-time_procent)*124)/100, display_line4_y, 124, 64, OLED::SOLID, OLED::BLACK);
	if(time_procent==100) Blink_display(Quantity_blink);
	display.display();
}
void Look_change_state(char& view)
{
	static Display_control Display_state_old;
	static char Error_old=0;
	char Error_now= (Get_T_Error_flag()|Get_Triak_Error_flag()|Get_motor_Error_flag());
	Display_state_now.temperature   = ((int)(Get_T_average()*100));
	Display_state_now.triac_state   = Get_Triak_control_ON();
	Display_state_now.triac_power   = Get_Triak_Percent_control();
	Display_state_now.timer_procent = Get_Control_therm_Timer_t_procent();
	if(view) return;
	if(Error_old!=Error_now)
	{
		Error_old = Error_now;
		if(Error_now) view = Viwe_display_Error;
		else		  view = Viwe_display_Text_ino;
	}
	else if((Error_now==0)&&(Display_state_old!=Display_state_now))
   {
		Display_state_old = Display_state_now;
		view = Viwe_display_value;
	}
}
void Automat_info()
{
	if(millis()<Show_logo_time) return;
	Look_change_state(view_on_display);
	switch(view_on_display)
	{
		case Viwe_display_Text_ino:
			Text_frame_Display();
			break;
		case Viwe_display_Error:
			Error_viwe_show();
			break;
		case Viwe_display_value:
			Value_show_display(((float)Display_state_now.temperature)/100,
							   	       Display_state_now.triac_state,
									   Display_state_now.triac_power,
									   Display_state_now.stage_name,
									   Display_state_now.timer_procent);
			break;
		case Viwe_display_logo:
			Start_logo_show();
			break;
		default:
			break;
	}
	view_on_display=0;
}
void Motor_checking()
{
	motor_state.ADS1110_value = ads1110.getData();
	if((motor_state.time_ms+Delta_motor_milis)>millis()) return;
	if(motor_state.change)
	{
		Set_PCF_port(0);
		motor_state.change = false;
	}
	else
	{
		if(motor_state.state==Stop_engine_now)
		{
			if(motor_state.ADS1110_value<Max_ok_signal)
			{
				motor_state.Error_flag = Error_Motor_current_on_stop;
				motor_state.name_state = "STOP prąd";
			}
		}
		else
		{
			if(motor_state.ADS1110_value>=Max_ok_signal)
			{
				motor_state.Error_flag = Error_Motor_not_current;
				motor_state.name_state = "Brak prądu";
			}
			else if(motor_state.ADS1110_value>=Max_revers_signal)
			{
				motor_state.name_state = "Odwrotny kierunek";
			}
		}
	}
	if(!motor_state.Error_flag) motor_state.name_state = "OK";
}
//-------------------------------------//

//-------- interface function area ----//
bool Set_PCF_port(char nr_out)
{
	if(nr_out!=0)
	{
	   if((nr_out<2)&&(nr_out>8)) return(1);
	   motor_state.state = nr_out;
	   motor_state.time_ms = millis();
	   motor_state.change = true;
	}
	display.i2c_start(PCF_adress);
	display.i2c_send((~nr_out)&0xFF);  // command
	display.i2c_stop();
	return(0);
}
void Set_stage_name_display(String name)
{
	Display_state_now.stage_name = name;
}
String Get_stage_name_display()
{
	return Display_state_now.stage_name;
}
void Set_viwe_display(char view)
{
	view_on_display = view;
}
unsigned int Get_motor_signal()
{
	return(motor_state.ADS1110_value);
}
String Get_motor_state()
{
	return(motor_state.name_state);
}
int Get_motor_Error_flag()
{
	return(motor_state.Error_flag);
}
int Get_motor_gear()
{
	return(motor_state.state);
}
void Clear_motor_Error_flag()
{
	motor_state.Error_flag = 0;
}
//-------------------------------------//
